(def! inc (fn* (a) (+ a 1)))

(def! dec (fn* (a) (- a 1)))

(def! zero? (fn* (n) (= 0 n)))

(def! reduce
  (fn* (f init xs)
    (if (> (count xs) 0)
      (reduce f (f init (car xs)) (cdr xs))
      init)))

(def! identity (fn* (x) x))

(def! every?
  (fn* (pred xs)
    (if (> (count xs) 0)
      (if (pred (car xs))
        (every? pred (cdr xs))
        nil)
      t)))

(def! not (fn* (x) (if x nil t)))

(def! some
  (fn* (pred xs)
    (if (> (count xs) 0)
      (let* (res (pred (car xs)))
        (if (pred (car xs))
          res
          (some pred (cdr xs))))
      nil)))

(defmacro! and
  (fn* (& xs)
    (if (not xs)
      t
      (if (= 1 (count xs))
        (car xs)
        (let* (condvar (gensym))
          `(let* (,condvar ,(car xs))
            (if ,condvar (and ,@(cdr xs)) ,condvar)))))))

(defmacro! or
  (fn* (& xs)
    (if (not xs)
      nil
      (if (= 1 (count xs))
        (car xs)
        (let* (condvar (gensym))
          `(let* (,condvar ,(car xs))
             (if ,condvar ,condvar (or ,@(cdr xs)))))))))

(defmacro! cond
  (fn* (& clauses)
    (if (> (count clauses) 0)
      (list 'if (car clauses)
            (if (> (count clauses) 1)
                (nth clauses 1)
                (throw "cond requires an even number of forms"))
            (cons 'cond (cdr (cdr clauses)))))))

(defmacro! ->
  (fn* (x & xs)
    (if (not xs)
      x
      (let* (form (car xs)
             more (cdr xs))
        (if (not more)
          (if (consp form)
            `(,(car form) ,x ,@(cdr form))
            (list form x))
          `(-> (-> ,x ,form) ,@more))))))

(defmacro! ->>
  (fn* (x & xs)
    (if (not xs)
      x
      (let* (form (car xs)
             more (cdr xs))
        (if (not more)
          (if (consp form)
            `(,(car form) ,@(cdr form) ,x)
            (list form x))
          `(->> (->> ,x ,form) ,@more))))))

nil
