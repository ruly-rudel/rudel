(setq inc (lambda (a) (+ a 1)))

(setq dec (lambda (a) (- a 1)))

(setq zero? (lambda (n) (= 0 n)))

;(setq reduce
;  (lambda (f init xs)
;    (if (> (count xs) 0)
;      (reduce f (f init (car xs)) (cdr xs))
;      init)))

(setq identity (lambda (x) x))

(setq every?
  (lambda (pred xs)
    (if (> (count xs) 0)
      (if (pred (car xs))
        (every? pred (cdr xs))
        nil)
      t)))

(setq not (lambda (x) (if x nil t)))

(setq some
  (lambda (pred xs)
    (if (> (count xs) 0)
      (let* ((res (pred (car xs))))
        (if (pred (car xs))
          res
          (some pred (cdr xs))))
      nil)))

;(defmacro! and
;  (lambda (& xs)
;    (if (not xs)
;      t
;      (if (= 1 (count xs))
;        (car xs)
;        (let* (condvar (gensym))
;          `(let* (,condvar ,(car xs))
;            (if ,condvar (and ,@(cdr xs)) ,condvar)))))))

;(defmacro! or
;  (lambda (& xs)
;    (if (not xs)
;      nil
;      (if (= 1 (count xs))
;        (car xs)
;        (let* (condvar (gensym))
;          `(let* (,condvar ,(car xs))
;             (if ,condvar ,condvar (or ,@(cdr xs)))))))))

;(defmacro! cond
;  (lambda (& clauses)
;    (if (> (count clauses) 0)
;      (list 'if (car clauses)
;            (if (> (count clauses) 1)
;                (nth clauses 1)
;                (throw "cond requires an even number of forms"))
;            (cons 'cond (cdr (cdr clauses)))))))

(defmacro -> (x & xs)
    (if (not xs)
      x
      (let* ((form (car xs))
             (more (cdr xs)))
        (if (not more)
          (if (consp form)
            `(,(car form) ,x ,@(cdr form))
            (list form x))
          `(-> (-> ,x ,form) ,@more)))))

(defmacro ->> (x & xs)
    (if (not xs)
      x
      (let* ((form (car xs))
             (more (cdr xs)))
        (if (not more)
          (if (consp form)
            `(,(car form) ,@(cdr form) ,x)
            (list form x))
          `(->> (->> ,x ,form) ,@more)))))

nil
