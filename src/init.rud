
(setq defun
	   (macro (name arg &rest body)
		`(setq ,name (lambda ,arg (progn ,@body)))))

(setq defmacro
	   (macro (name arg &rest body)
		`(setq ,name (macro ,arg (progn ,@body)))))

(defmacro \ (arg &rest body)
  (if (or (consp arg) (not arg))
    `(lambda  ,arg  (progn ,@body))
    `(lambda (,arg) (progn ,@body))))

;; conditions
(defun not (a)
	(if a nil t))

(defmacro and (&rest xs)
    (if (not xs)
      t
      (if (equal 1 (count xs))
        (car xs)
        (let* ((condvar (gensym)))
          `(let* ((,condvar ,(car xs)))
            (if ,condvar (and ,@(cdr xs)) ,condvar))))))

(defmacro or (&rest xs)
    (if (not xs)
      nil
      (if (equal 1 (count xs))
        (car xs)
        (let* ((condvar (gensym)))
          `(let* ((,condvar ,(car xs)))
             (if ,condvar ,condvar (or ,@(cdr xs))))))))

(defmacro cond (&rest clauses)
    (if (> (count clauses) 0)
      (list 'if (car clauses)
            (if (> (count clauses) 1)
                (nth clauses 1)
                (throw "cond requires an even number of forms"))
            (cons 'cond (cdr (cdr clauses))))))

;; list manipulation functions
(defun cadr (x) (car (cdr x)))
(defun cddr (x) (cdr (cdr x)))
(defun caddr (x) (car (cdr (cdr x))))

(defun first  (x) (car x))
(defun second (x) (car (cdr x)))
(defun third  (x) (car (cdr (cdr x))))
(defun fourth (x) (car (cdr (cdr (cdr x)))))
(defun fifth  (x) (car (cdr (cdr (cdr (cdr x))))))

(defun nthcdr (n x)
	(if n
	  (if (eq n 0)
	    (cdr x)
	    (nthcdr (- n 1) (cdr x)))
	  x))

(defun last (x)
	(if x
	  (if (consp x)
	    (if (cdr x)
	      (last (cdr x))
	      x))
	  nil))

;; list duplication functions

;(defun list (&rest body) body)
(defun list (&rest body) (copy-list body))

(defun copy-list-n (x n)
	(if (and n (eq n 0)) nil
	   (if x
	     (if (consp x)
	       (cons (car x) (copy-list-n (cdr x) (if n (- n 1))))
	       x))))

(defun copy-list (lst)
  (if lst
    (if (consp lst)
      (cons (car lst) (copy-list (cdr lst))))))

(defun remove (x lst)
	(if lst
	  (if (equal x (car lst))
	    (remove x (cdr lst))
	    (cons (car lst) (remove x (cdr lst))))))

(defun concat (&rest body)
	(let* ((rec (\x
			(if (not x) nil
			  (if (consp x)
			    (let* ((copy (copy-list (car x))))
			      (if (consp copy)
				 (progn
				   (rplacd (last copy) (rec (cdr x)))
				   copy)
				 (rec (cdr x))))
			    x)))))
	  (rec body)))

;; map functions
(defun reduce (fn lst)
	(let*
	  ((rec      (\ (head lst)
			 (if lst
			   (rec (fn head (car lst)) (cdr lst))
			   head))))
	  (if (cdr lst)	;; 2 or more arg
	      (rec (fn (car lst) (cadr lst)) (cddr lst))
	      (car lst))))	;; 1 element in lst

(defun mapcar (fn lst)
	(if lst
	  (cons (fn (car lst)) (mapcar fn (cdr lst)))))

(defun repeat (n x fn)
	(if (<= n 1) x
	  (fn x (repeat (- n 1) x fn))))

(defun str (&rest body)
  (if body
    (reduce (\ (x y) (vconc x y))
	    (mapcar (\x (pr_str x nil)) body))
    ""))

(defun pr-str (&rest body)
  (if body
    (reduce (\ (x y) (vconc (vconc x " ") y))
	    (mapcar (\x (pr_str x t)) body))
    ""))

(defun println-str (body)
  (reduce (\ (x y) (vconc (vconc x " ") y))
	  (mapcar (\x (pr_str x nil)) body)))

(defun println (&rest body)
  (printline (println-str body)))

(defmacro prn (&rest body)
  `(printline (pr-str ,@body)))

(defmacro push (value place)
  `(setq ,place (cons ,value ,place)))

(defmacro pop (place)
  (let* ((value (gensym)))
    `(let* ((,value (car ,place)))
       (progn
	 (setq ,place (cdr ,place))
	 ,value))))

(defmacro try (code catch)
  (let* ((e      (gensym))
	 (result (gensym))
	 (ret    (gensym))
	 (onerr  (gensym)))
    `(callcc (\,ret
	       (let* ((,e (callcc (\,onerr
				    (progn
				      (push ,onerr *exception-stack*)
				      (let* ((,result ,code))
					(progn
					  (pop *exception-stack*)
					  (,ret ,result))))))))
		 (,catch ,e))))))

(defun throw (e)
  ((pop *exception-stack*) e))

(defmacro reset (e)
  `(*reset (\ () ,e)))

(defmacro shift (k e)
  `(*shift (\ ,k ,e)))

(defun *meta-continuation* (v)
  (throw "You forgot the top-level reset."))

(defun *abort (thunk)
  (let* ((v (thunk)))
    (*meta-continuation* v)))

(defun *reset (thunk)
  (let* ((mc *meta-continuation*))
    (callcc (\k (setq *meta-continuation*
		      (\v (setq *meta-continuation* mc)
			  (k v)))
		(*abort thunk)))))

(defun *shift (f)
  (callcc (\k (*abort (\ () (f (\v (reset (k v)))))))))

(defun list* (&rest lst)
  (let* ((rec (lambda (x)
		(if (cddr x)
		  (cons (car x) (rec (cdr x)))
		  (cons (car x) (cadr x))))))
    (if lst (rec lst))))

(defun macroexpand-all (ast)
  (if (consp ast)
    (let* ((fn (car ast)))
      (if (specialp fn)
	(cond
	  (eq fn 'setq)   (list* 'setq   (second ast) (mapcar macroexpand-all (cddr ast)))
	  (eq fn 'let*)   (list* 'let*
				 (mapcar (\x (list (car x) (macroexpand-all (cadr x))))
					 (second ast))
				 (mapcar macroexpand-all (cddr ast)))
	  (eq fn 'progn)  (cons  'progn               (mapcar macroexpand-all (cdr ast)))
	  (eq fn 'if)     (cons  'if                  (mapcar macroexpand-all (cdr ast)))
	  (eq fn 'lambda) (list* 'lambda (second ast) (mapcar macroexpand-all (cddr ast)))
	  (eq fn 'macro)  (list* 'macro  (second ast) (mapcar macroexpand-all (cddr ast)))
	  t ast)
	(if (try (macrop (eval fn)) (\x nil))
	  (macroexpand-all (macroexpand ast))
	  (mapcar macroexpand-all ast))))
    ast))

;; rudel-specific functions
(defun load-file (f)
	(eval (read-string (str "(progn " (slurp f) ")"))))

;(if (cond)
;    (true)
;    (false)
;(defun name (args)
;    (body))
;(let* (a b
;       c d)
;    (body))
;(progn
;    (body1)
;    (body2))
;(setq x
;    (value))
;(lambda name (args)
;    (body))

(defun insert-space (n)
	(repeat n " " str))

(defun pp-n (lst indent n)
	(let* ((prec  (copy-list-n lst (if (equal n 0) nil n)))
	       (trail (if (equal n 0) nil (nthcdr (- n 1) lst)))
	       (next  (+ indent 3)))
	  (str
	    "("
	    (reduce (\ (x y) (str x " " y))
		    (mapcar (\x (pp x next)) prec))
	    (if trail
	      (str
	         "\n"
	         (insert-space next)
		 (reduce (\ (x y) (str x "\n" (insert-space next) y))
			 (mapcar (\x (pp x next)) trail))
		 ")")
	      ")"))))

(defun pp (tree indent)
  (if (and (consp tree) (not (strp tree)))
    (let*
      ((trial (pp-n tree 0 0))
       (len   (vsize trial)))
      (if (> len 30)
	(let* ((fn (car tree)))
	  (cond
	    (eq fn 'if)       (pp-n tree indent 2)
	    (eq fn 'setq)     (pp-n tree indent 2)
	    (eq fn 'lambda)   (pp-n tree indent 2)
	    (eq fn '\ )       (pp-n tree indent 2)
	    (eq fn 'defun)    (pp-n tree indent 3)
	    (eq fn 'defmacro) (pp-n tree indent 3)
	    t                 (pp-n tree indent 1)))
	trial))
    (pr-str tree)))

(defun ppln (tree)
	(println (pp tree 0)))

(defun vector (&rest lst)
  (let* ((rec (lambda (x v)
		(if x
		  (rec (cdr x) (vpush (car x) v))
		  v))))
    (rec lst (make-vector (count lst)))))

(defun vdump (v)
	(let* ((rec (\n
		      (if (eq n (- (vsize v) 1))
			(str n ": " (vref v n) "\n")
			(str n ": " (vref v n) "\n" (rec (+ n 1)))))))
	  (println (rec 0))))

(defun vmap (fn v)
	(let* ((rec (lambda (n)
		      (if (eq n (- (vsize v) 1))
			(fn (vref v n))
			(cons (fn (vref v n)) (rec (+ n 1)))))))
	  (rec 0)))

(defun compile-env ()
  (vmap (lambda (x)
	  (if (clojurep (cdr x))
	    (progn
	      (rplaca (cdr x) (macroexpand-all (cadr x)))
	      (compile-vm (cdr x)))))
	(car (last env))))

;(defun compile-env ()
;  (vmap (lambda (x)
;	  (let* ((val (cdr x)))
;	    (if (clojurep val)
;	      (compile-vm (cons (macroexpand-all (car val)) (cdr val))))))
;	(car (last env))))


(defun initcore ()
  (progn
    (init)
    (compile-env)
    (save-core "init.rudc")))

(defun vmcode (x)
  (if (or (clojurep x) (macrop x))
    (car (third x))))

;; debug functions
(defun trace (x)
	(setq *trace* (if x (cons x *trace*))))

(defun step ()
	(setq *debug* (cons '#step# *debug*)))

(defun cont ()
	(setq *debug* (remove '#step# *debug*)))

(defun break (x)
	(setq *debug* (cons x *debug*)))

(defun clear (x)
	(setq *debug* (remove x *debug*)))

(defun clear-all ()
	(setq *debug* nil))

